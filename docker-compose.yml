version: '2'

# Prerequisite: named volumes "nvpostgisdata" and "nvtiles" must be created.
# To list all the docker volumes:
# docker volume ls
#
# To create the named volumes:
# docker volume create --name nvpostgisdata -d local
# docker volume create --name nvtiles -d local
#
# To prepare db:
# docker-compose run --rm app-osm initdb
#
# To import "bretagne-latest.osm.pbf" into db:
# docker-compose run --rm app-osm import
#

# To start all services (start populated postgis database, start renderd, start apache):
# docker-compose up -d  
#
# To remove named volume (only if necessary):
# docker volume rm nvpostgisdata
# docker volume rm nvtiles
services:
  app_osm:
    build: .
    image: zummach/tiles
    volumes:
      # keep postgresql database files on host in named volume "nvpostgisdata":
      - nvpostgisdata:/var/lib/postgresql
      # keep OSM tiles on host in named volume "nvtiles":
      - nvtiles:/var/lib/mod_tile
      # mount OSM data file from host into Docker container
      - ./data.pbf:/tmp/import.osm.pbf
    environment:
      OSM_IMPORT_FILE: '/tmp/import.osm.pbf'
      OSM_IMPORT_CACHE: '8000'
      OSM_RENDER_MIN_ZOOM: '0'
      OSM_RENDER_MAX_ZOOM: '8'
      OSM_RENDER_THREADS: 4
      OSM_UPDATE_LINK: 'http://download.geofabrik.de/south-america/brazil/sul-latest.osm.pbf'
      # OSM_RENDER_X_MIN: -1.73318
      # OSM_RENDER_X_MAX: -1.56313
      # OSM_RENDER_Y_MIN: 48.07221
      # OSM_RENDER_Y_MAX: 48.14671
      # To restrict acces according to specific keys in QUERY_STRING
      #  (in URLs like http://osmserver_hostname:osmserver_port/osm_tiles/{z}/{x}/{y}.png?keyId=abcdefghijklmnopqrstuvwxyz1234567890 - see sample file "test_with_keyId.html"),
      #  use OSM_WEB_AUTHORIZED_IDS (multiple values must be pipe ('|') separated):
      #OSM_WEB_AUTHORIZED_IDS: 'abcdefghijklmnopqrstuvwxyz1234567890|another_id'
      # To restrict acces according to specific HTTP REFERERS, use OSM_WEB_AUTHORIZED_REFERERS (multiple values must be pipe ('|') separated):
      #OSM_WEB_AUTHORIZED_REFERERS: 'www.example.com|www.example2.com'
    command: 'startservices'
  app_osm_alternativo:
    build: .
    image: zummach/tiles
    volumes:
      # keep postgresql database files on host in named volume "nvpostgisdata":
      - nvpostgisdata-alt:/var/lib/postgresql
      # keep OSM tiles on host in named volume "nvtiles":
      - nvtiles-alt:/var/lib/mod_tile
      # mount OSM data file from host into Docker container
      - ./data.pbf:/tmp/import.osm.pbf
    environment:
      OSM_IMPORT_FILE: '/tmp/import.osm.pbf'
      OSM_IMPORT_CACHE: '8000'
      OSM_RENDER_MIN_ZOOM: '0'
      OSM_RENDER_MAX_ZOOM: '8'
      OSM_RENDER_THREADS: 4
      OSM_UPDATE_LINK: 'http://download.geofabrik.de/south-america/brazil/sul-latest.osm.pbf'
      # OSM_RENDER_X_MIN: -1.73318
      # OSM_RENDER_X_MAX: -1.56313
      # OSM_RENDER_Y_MIN: 48.07221
      # OSM_RENDER_Y_MAX: 48.14671
      # To restrict acces according to specific keys in QUERY_STRING
      #  (in URLs like http://osmserver_hostname:osmserver_port/osm_tiles/{z}/{x}/{y}.png?keyId=abcdefghijklmnopqrstuvwxyz1234567890 - see sample file "test_with_keyId.html"),
      #  use OSM_WEB_AUTHORIZED_IDS (multiple values must be pipe ('|') separated):
      #OSM_WEB_AUTHORIZED_IDS: 'abcdefghijklmnopqrstuvwxyz1234567890|another_id'
      # To restrict acces according to specific HTTP REFERERS, use OSM_WEB_AUTHORIZED_REFERERS (multiple values must be pipe ('|') separated):
      #OSM_WEB_AUTHORIZED_REFERERS: 'www.example.com|www.example2.com'
    command: 'startservices'
  proxy:
    image: nginx:alpine
    volumes:
      - ./nginx.proxy.conf:/etc/nginx/nginx.conf
    depends_on:
      - app_osm
      - app_osm_alternativo
    ports:
      - 80:80
volumes:
  nvpostgisdata:
    external: true
  nvtiles:
    external: true
  nvpostgisdata-alt:
    external: true
  nvtiles-alt:
    external: true
